@using Sandbox;
@using Sandbox.UI;
@attribute [StyleSheet]

@namespace GuessIt

@code
{
    enum LOBBY_STATE
    {
        WAITING_FOR_PLAYERS,
        PLAYING,
        RESULTS
    }

    enum LOBBY_MESSAGE
    {
        NONE,
        DRAW
    }
}

<root>

    <div class="header">
        <img src="ui/logo.png" class="logo" />
    </div>

    <div class="big-container">
        
        <div class="game-header">
            <div class="game-info">
                <div class="timer">28</div>
                <div class="round">Round 1 of 3</div>
            </div>

            <div class="game-word">
                <GameHeader @ref="Header" />
            </div>

            <div class="game-settings">
                
            </div>
        </div>

        <div class="game-container">

            <div class="player-list">
                <p class="header">Players</p>

                <div class="players">

                    @foreach(var player in Game.Menu.Lobby.Members)
                    {
                        <div class="player">
                            <div class="avatar">
                                <image texture=@($"avatar:{@player.Id}") />
                                @if(player.Id == Game.Menu.Lobby.Owner.Id)
                                {
                                    <img src="ui/host_frame.png" />
                                }
                            </div>
                            <div class="info">
                                <div class="player-name">@player.Name</div>
                                <div class="player-score">Score: 0</div>
                            </div>
                            <div class="rank">##1</div>
                        </div>
                    }
                </div>
                

            </div>

            <div class="game-canvas">

            </div>

            <div class="chat-container">
                <p class="header">Chat</p>

                <div class="chat" @ref="ChatBox" PreferScrollToBottom=@(true)>
                    


                </div>

                <TextEntry @ref="ChatEntry" onsubmit=@SendChat Value:bind=@ChatText Placeholder="Type your guess here..." AllowEmojiReplace=@(true) ></TextEntry>
            </div>

        </div>

    </div>

</root>

@code
{
    GameHeader Header { get; set; }
    TextEntry ChatEntry { get; set; }
    Panel ChatBox { get; set; }
    string ChatText { get; set; }
    int ChatIndex = 0;

    protected override void OnAfterTreeRender(bool firstTime)
    {
        base.OnAfterTreeRender(firstTime);

        if(firstTime)
        {
            Game.Menu.Lobby.OnChatMessage = OnChatMessage;
            Game.Menu.Lobby.OnMemberEnter = OnMemberEnter;
            Game.Menu.Lobby.OnMemberLeave = OnMemberLeave;

            if(Game.Menu.Lobby.Owner.Id == Game.SteamId)
            {
                InitLobby();
            }
        }
    }

    void InitLobby()
    {
        Game.Menu.Lobby.SetData("state", LOBBY_STATE.WAITING_FOR_PLAYERS.ToString());
        Game.Menu.Lobby.SetData("guess", "");
        Game.Menu.Lobby.SetData("correct", "");
    }



    void SendChat()
    {
        Game.Menu.Lobby.SendChat(ChatText);
        ChatEntry.Text = "";
        ChatEntry.Focus();
    }

    void OnChatMessage(Friend friend, string message)
    {
        if(Game.Menu.Lobby.Data["state"] == LOBBY_STATE.PLAYING.ToString() && message.Contains(Game.Menu.Lobby.Data["guess"]))
        {
            CreateChatEntry(friend.Name, " guessed correctly!");
        }
        else
        {
            CreateChatEntry(friend.Name + ":", message);
        }
    }

    void OnMemberEnter(Friend friend)
    {
        CreateChatEntry(friend.Name, " has joined the game.");
    }

    void OnMemberLeave(Friend friend)
    {
        CreateChatEntry(friend.Name, " has left the game.");
    }

    void CreateChatEntry(string name, string message)
    {
        var entry = ChatBox.AddChild<ChatEntry>();
        entry.SetMessage(name, message);

        if(ChatBox.ChildrenCount > 256)
        {
            ChatBox.GetChild(ChatBox.ChildrenCount - 1).Delete();
        }

        Audio.Play("ui.chat.message" + (ChatIndex + 1));

        ChatIndex = (ChatIndex + 1) % 2;
    }

}